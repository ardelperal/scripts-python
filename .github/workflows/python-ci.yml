name: Python CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

concurrency:
  group: python-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  smoke-test-runners:
    name: Smoke Runners
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          # Using explicit cache step below instead of built-in cache for clarity
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install minimal deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest
      - name: Run smoke tests (runners)
        run: |
          pytest -q tests/test_runners_smoke.py

  build-test:
    name: Test (matrix)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: smoke-test-runners
    strategy:
      fail-fast: false
      matrix:
        python-version: [ '3.9', '3.10', '3.11' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          # Using explicit cache step below instead of built-in cache for clarity

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies (project + test + coverage)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt coverage pytest; else pip install coverage pytest; fi

      - name: Run tests with coverage (pytest)
        env:
          PYTHONWARNINGS: ignore::DeprecationWarning
        run: |
          coverage run -m pytest
          coverage json -o coverage.json

      - name: Coverage summary
        run: |
          coverage report -m --fail-under=85

      - name: Generate coverage artifacts (XML + HTML)
        run: |
          coverage xml
          coverage html
          # Ensure json already generated; if missing (fallback) generate now
          if [ ! -f coverage.json ]; then coverage json -o coverage.json; fi

      - name: Upload coverage XML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml-${{ matrix.python-version }}
          path: coverage.xml
          if-no-files-found: error
      - name: Upload coverage HTML report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-html
          path: htmlcov
          if-no-files-found: error

      - name: Publish Coverage Summary
        run: |
          echo "Parsing coverage.json for total percent..."
          if [ ! -f coverage.json ]; then echo 'coverage.json missing'; exit 1; fi
          total=$(python -c "import json; d=json.load(open('coverage.json')); t=d.get('totals',{}); p=t.get('percent_covered') or t.get('percent_covered_display') or 0.0; print(f'{p:.2f}')")
          echo "Total coverage: $total%"
          {
            echo '### ðŸ“Š Resumen de Cobertura de Tests'
            echo ''
            echo "- **Cobertura Total:** ${total}%"
            echo ''
            echo '> Generado automÃ¡ticamente a partir de coverage.json'
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: coverage.xml
          flags: py${{ matrix.python-version }}
          fail_ci_if_error: true
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}
