version: '3.8'

services:
  # Servidor SMTP local para desarrollo
  smtp-server:
    image: mailhog/mailhog:latest
    container_name: smtp-server-dev
    ports:
      - "1025:1025"  # Puerto SMTP
      - "8025:8025"  # Interfaz web para ver correos
    environment:
      - MH_STORAGE=memory
      - MH_SMTP_BIND_ADDR=0.0.0.0:1025
      - MH_UI_BIND_ADDR=0.0.0.0:8025
      - MH_API_BIND_ADDR=0.0.0.0:8025
    networks:
      - scripts-network
    profiles:
      - dev
      - local

  # Servicio principal - Scripts continuos
  scripts-python-runner:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: scripts-python-runner
    environment:
      - PYTHONPATH=/app/src:/app
      - DATABASE_MODE=sqlite
      - ENVIRONMENT=docker
      - DOCKER_CONTAINER=true
      - LOG_LEVEL=INFO
      # SMTP configuration - usar servidor local en desarrollo
      - SMTP_SERVER=smtp-server
      - SMTP_PORT=1025
      - SMTP_USE_LOCAL=true
    volumes:
      # Persistir logs
      - ./logs:/app/logs
      # Persistir bases de datos SQLite
      - ./dbs-sqlite:/app/dbs-sqlite
    restart: unless-stopped
    command: ["python", "continuous_runner.py"]
    depends_on:
      - smtp-server
    networks:
      - scripts-network
    profiles:
      - local
      
  # Servicio web dashboard
  scripts-python-web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: scripts-python-web
    ports:
      - "5000:5000"
    environment:
      - PYTHONPATH=/app/src:/app
      - FLASK_ENV=production
      - DATABASE_MODE=sqlite
      - ENVIRONMENT=docker
      - DOCKER_CONTAINER=true
      - LOG_LEVEL=INFO
      # SMTP configuration
      - SMTP_SERVER=smtp-server
      - SMTP_PORT=1025
      - SMTP_USE_LOCAL=true
    volumes:
      - ./logs:/app/logs
      - ./dbs-sqlite:/app/dbs-sqlite
    restart: unless-stopped
    command: ["python", "server.py"]
    depends_on:
      - smtp-server
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - scripts-network
    profiles:
      - local

  # Servicio para desarrollo con hot reload
  scripts-python-dev:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: scripts-python-dev
    ports:
      - "5001:5000"
    environment:
      - PYTHONPATH=/app/src:/app
      - FLASK_ENV=development
      - DATABASE_MODE=sqlite
      - ENVIRONMENT=local
      - DOCKER_CONTAINER=false
      - LOG_LEVEL=DEBUG
      # SMTP local para desarrollo
      - SMTP_SERVER=smtp-server
      - SMTP_PORT=1025
      - SMTP_USE_LOCAL=true
    volumes:
      # Montar código fuente para desarrollo en caliente
      - .:/app
      - ./logs:/app/logs
    command: ["python", "server.py", "--debug"]
    depends_on:
      - smtp-server
    profiles:
      - dev
    networks:
      - scripts-network

  # Servicios para producción (sin SMTP local)
  scripts-python-runner-prod:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: scripts-python-runner-prod
    environment:
      - PYTHONPATH=/app/src:/app
      - DATABASE_MODE=sqlite
      - ENVIRONMENT=docker
      - DOCKER_CONTAINER=true
      - LOG_LEVEL=INFO
      # SMTP real de oficina
      - SMTP_SERVER=10.73.54.85
      - SMTP_PORT=25
      - SMTP_USE_LOCAL=false
    volumes:
      - ./logs:/app/logs
      - ./dbs-sqlite:/app/dbs-sqlite
    restart: unless-stopped
    command: ["python", "continuous_runner.py"]
    networks:
      - scripts-network
    profiles:
      - prod

  scripts-python-web-prod:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: scripts-python-web-prod
    ports:
      - "5000:5000"
    environment:
      - PYTHONPATH=/app/src:/app
      - FLASK_ENV=production
      - DATABASE_MODE=sqlite
      - ENVIRONMENT=docker
      - DOCKER_CONTAINER=true
      - LOG_LEVEL=INFO
      # SMTP real de oficina
      - SMTP_SERVER=10.73.54.85
      - SMTP_PORT=25
      - SMTP_USE_LOCAL=false
    volumes:
      - ./logs:/app/logs
      - ./dbs-sqlite:/app/dbs-sqlite
    restart: unless-stopped
    command: ["python", "server.py"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - scripts-network
    profiles:
      - prod

networks:
  scripts-network:
    driver: bridge
